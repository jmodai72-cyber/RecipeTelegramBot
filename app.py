# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import telebot
from telebot import types
import json
import uuid
import os
from flask import Flask, request

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
BOT_TOKEN = "8497669891:AAHMtQafkZ_6VpbbmN4dQjcXkH-o_et1QwA"
bot = telebot.TeleBot(BOT_TOKEN)

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
RECIPES_FILE = 'recipes.json'
USER_STATE = {}
STATE_NAME = 1
STATE_CATEGORY = 2
STATE_INGREDIENTS = 3
STATE_VIDEO = 4
STATE_KEYWORDS = 5
FAVORITE_KEY = "is_favorite"
FAVORITE_CATEGORY_NAME = "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
CUSTOM_CATEGORY_ORDER = ["–ó–∞–≤—Ç—Ä–∞–∫", "–°—É–ø—ã", "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞", "–°–∞–ª–∞—Ç", "Vegan", "–î–µ—Å–µ—Ä—Ç—ã"]

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø JSON ---
def load_recipes():
    if not os.path.exists(RECIPES_FILE):
        return {}
    try:
        with open(RECIPES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def save_recipes(recipes_data):
    with open(RECIPES_FILE, 'w', encoding='utf-8') as f:
        json.dump(recipes_data, f, ensure_ascii=False, indent=4)

RECIPES = load_recipes()

# --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–† ---
def generate_main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "üîç –ü–æ–∏—Å–∫ –†–µ—Ü–µ–ø—Ç–∞")
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–µ—Ü–µ–ø—Ç")
    return markup

def generate_categories_markup():
    existing_categories = set(r['category'] for r in RECIPES.values())
    markup = types.InlineKeyboardMarkup(row_width=2)
    if any(r.get(FAVORITE_KEY) for r in RECIPES.values()):
        markup.add(types.InlineKeyboardButton(FAVORITE_CATEGORY_NAME, callback_data="cat_favorite"))
    for cat in CUSTOM_CATEGORY_ORDER:
        if cat in existing_categories:
            markup.add(types.InlineKeyboardButton(cat, callback_data=f"cat_{cat}"))
    if RECIPES:
        markup.add(types.InlineKeyboardButton("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="cat_all"))
    return markup

def generate_recipe_actions_markup(recipe_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    recipe = RECIPES.get(recipe_id, {})
    is_fav = recipe.get(FAVORITE_KEY, False)
    fav_text = "‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_fav else "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    markup.add(types.InlineKeyboardButton(fav_text, callback_data=f"toggle_fav_{recipe_id}"))
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{recipe_id}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_cats"))
    return markup

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.chat.id}")
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à—É –∫–Ω–∏–≥—É —Ä–µ—Ü–µ–ø—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        bot.send_message(message.chat.id, text, reply_markup=generate_main_markup())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start: {e}")

@bot.message_handler(func=lambda message: message.text == "üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
def show_categories(message):
    if not RECIPES:
        bot.send_message(message.chat.id, "–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç!")
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=generate_categories_markup())

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –†–µ—Ü–µ–ø—Ç–∞")
def start_search(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º):")
    bot.register_next_step_handler(message, process_search_query)

def process_search_query(message):
    query = message.text.lower()
    found_recipes = {}
    for recipe_id, recipe in RECIPES.items():
        searchable_text = f"{recipe['title']} {recipe['category']} {recipe['ingredients']} {recipe.get('keywords', '')}".lower()
        if query in searchable_text:
            found_recipes[recipe_id] = recipe
    if found_recipes:
        text = f"–ù–∞–π–¥–µ–Ω–æ {len(found_recipes)} —Ä–µ—Ü–µ–ø—Ç(–æ–≤):\n"
        markup = types.InlineKeyboardMarkup(row_width=1)
        for recipe_id, recipe in found_recipes.items():
            text += f"‚ñ™Ô∏è {recipe['title']}\n"
            markup.add(types.InlineKeyboardButton(recipe['title'], callback_data=f"show_{recipe_id}"))
        bot.send_message(message.chat.id, text, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–¶–ï–ü–¢–ê ---
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–µ—Ü–µ–ø—Ç")
def start_add_recipe(message):
    chat_id = message.chat.id
    USER_STATE[chat_id] = {"state": STATE_NAME, "temp_recipe": {}}
    bot.send_message(chat_id, "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:")
    bot.register_next_step_handler(message, process_name)

def process_name(message):
    chat_id = message.chat.id
    USER_STATE[chat_id]['temp_recipe']['title'] = message.text.strip()
    USER_STATE[chat_id]['state'] = STATE_CATEGORY
    categories = sorted(list(set(r['category'] for r in RECIPES.values())))
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if categories:
        markup.add(*categories, row_width=2)
    bot.send_message(chat_id, "–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(message, process_category)

def process_category(message):
    chat_id = message.chat.id
    USER_STATE[chat_id]['temp_recipe']['category'] = message.text.strip()
    USER_STATE[chat_id]['state'] = STATE_INGREDIENTS
    bot.send_message(chat_id, "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:", reply_markup=generate_main_markup())
    bot.register_next_step_handler(message, process_ingredients)

def process_ingredients(message):
    chat_id = message.chat.id
    USER_STATE[chat_id]['temp_recipe']['ingredients'] = message.text.strip()
    USER_STATE[chat_id]['state'] = STATE_VIDEO
    bot.send_message(chat_id, "–®–∞–≥ 4/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É:")
    bot.register_next_step_handler(message, process_video)

def process_video(message):
    chat_id = message.chat.id
    video_info = None
    if message.video:
        video_info = message.video.file_id
        USER_STATE[chat_id]['temp_recipe']['video_type'] = 'file'
    elif message.text:
        video_info = message.text.strip()
        USER_STATE[chat_id]['temp_recipe']['video_type'] = 'link'
    if not video_info:
        bot.send_message(chat_id, "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_video)
        return
    USER_STATE[chat_id]['temp_recipe']['video'] = video_info
    USER_STATE[chat_id]['temp_recipe'][FAVORITE_KEY] = False
    USER_STATE[chat_id]['state'] = STATE_KEYWORDS
    bot.send_message(chat_id, "–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(message, finish_recipe_add)

def finish_recipe_add(message):
    chat_id = message.chat.id
    temp_recipe = USER_STATE[chat_id]['temp_recipe']
    temp_recipe['keywords'] = message.text.strip().lower()
    recipe_id = str(uuid.uuid4())
    RECIPES[recipe_id] = temp_recipe
    save_recipes(RECIPES)
    del USER_STATE[chat_id]
    bot.send_message(chat_id, f"üéâ –†–µ—Ü–µ–ø—Ç '{temp_recipe['title']}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=generate_main_markup())

# --- CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('cat_'))
def handle_category_selection(call):
    bot.answer_callback_query(call.id)
    category_id = call.data.split('_')[1]
    if category_id == 'all':
        filtered_recipes = RECIPES
        title = "–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã"
    elif category_id == 'favorite':
        filtered_recipes = {id: r for id, r in RECIPES.items() if r.get(FAVORITE_KEY)}
        title = FAVORITE_CATEGORY_NAME
    else:
        filtered_recipes = {id: r for id, r in RECIPES.items() if r['category'] == category_id}
        title = f"–†–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_id}"
    if not filtered_recipes:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{title}' –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.", reply_markup=generate_categories_markup())
        return
    markup = types.InlineKeyboardMarkup(row_width=1)
    for recipe_id, recipe in filtered_recipes.items():
        star = "‚≠ê " if recipe.get(FAVORITE_KEY) else ""
        markup.add(types.InlineKeyboardButton(f"{star}{recipe['title']}", callback_data=f"show_{recipe_id}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=title, reply_markup=markup)

# --- –§–£–ù–ö–¶–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –†–ï–¶–ï–ü–¢–ê ---
def send_recipe_details(chat_id, message_id, recipe_id):
    recipe = RECIPES.get(recipe_id)
    if not recipe:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    favorite_status = " (‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º)" if recipe.get(FAVORITE_KEY) else ""
    recipe_text = (
        f"üìù *{recipe['title']}*{favorite_status}\n"
        f"üî∏ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {recipe['category']}\n\n"
        f"ü•ï *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{recipe['ingredients']}\n\n"
        f"üîó *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:*\n{recipe.get('keywords', '–ù–µ—Ç')}"
    )
    back_markup = generate_recipe_actions_markup(recipe_id)
    video_info = recipe.get('video')
    video_type = recipe.get('video_type')
    try:
        if video_info and video_type == 'file':
            bot.send_video(chat_id, video_info, caption=recipe_text, parse_mode="Markdown")
            bot.delete_message(chat_id, message_id)
            bot.send_message
