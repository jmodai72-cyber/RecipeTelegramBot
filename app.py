# --- –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
import telebot
from telebot import types
import json
import uuid
import os
from flask import Flask, request

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
BOT_TOKEN = "8497669891:AAHMtQafkZ_6VpbbmN4dQjcXkH-o_et1QwA"
bot = telebot.TeleBot(BOT_TOKEN)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
RECIPES_FILE = 'recipes.json'
USER_STATE = {}
STATE_NAME = 1
STATE_CATEGORY = 2
STATE_INGREDIENTS = 3
STATE_VIDEO = 4
STATE_KEYWORDS = 5
FAVORITE_KEY = "is_favorite"
FAVORITE_CATEGORY_NAME = "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"

CUSTOM_CATEGORY_ORDER = [
    "–ó–∞–≤—Ç—Ä–∞–∫", "–°—É–ø—ã", "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞", "–°–∞–ª–∞—Ç", "Vegan", "–î–µ—Å–µ—Ä—Ç—ã"
]

# --- –†–∞–±–æ—Ç–∞ —Å JSON ---
def load_recipes():
    if not os.path.exists(RECIPES_FILE):
        print("–§–∞–π–ª —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º.")
        return {}
    try:
        with open(RECIPES_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ {RECIPES_FILE}.")
            return data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return {}

def save_recipes(data):
    try:
        with open(RECIPES_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

RECIPES = load_recipes()

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def generate_main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "üîç –ü–æ–∏—Å–∫ –†–µ—Ü–µ–ø—Ç–∞")
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–µ—Ü–µ–ø—Ç")
    return markup

def generate_categories_markup():
    existing_categories = set(r['category'] for r in RECIPES.values())
    markup = types.InlineKeyboardMarkup(row_width=2)
    if any(r.get(FAVORITE_KEY) for r in RECIPES.values()):
        markup.add(types.InlineKeyboardButton(FAVORITE_CATEGORY_NAME, callback_data="cat_favorite"))
    for cat in CUSTOM_CATEGORY_ORDER:
        if cat in existing_categories:
            markup.add(types.InlineKeyboardButton(cat, callback_data=f"cat_{cat}"))
    if RECIPES:
        markup.add(types.InlineKeyboardButton("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="cat_all"))
    return markup

def generate_recipe_actions_markup(recipe_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    recipe = RECIPES.get(recipe_id, {})
    is_fav = recipe.get(FAVORITE_KEY, False)
    fav_text = "‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_fav else "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    markup.add(types.InlineKeyboardButton(fav_text, callback_data=f"toggle_fav_{recipe_id}"))
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{recipe_id}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_cats"))
    return markup

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f"DEBUG: /start –æ—Ç {message.chat.id}")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à—É –∫–Ω–∏–≥—É —Ä–µ—Ü–µ–ø—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                     reply_markup=generate_main_markup())

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@bot.message_handler(func=lambda message: message.text == "üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
def show_categories(message):
    if not RECIPES:
        bot.send_message(message.chat.id, "–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç!")
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=generate_categories_markup())

# --- –ü–æ–∏—Å–∫ ---
@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –†–µ—Ü–µ–ø—Ç–∞")
def start_search(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, process_search_query)

def process_search_query(message):
    query = message.text.lower()
    found_recipes = {}
    for rid, recipe in RECIPES.items():
        text = f"{recipe['title']} {recipe['category']} {recipe['ingredients']} {recipe.get('keywords','')}".lower()
        if query in text:
            found_recipes[rid] = recipe
    if found_recipes:
        text = f"–ù–∞–π–¥–µ–Ω–æ {len(found_recipes)} —Ä–µ—Ü–µ–ø—Ç(–æ–≤):\n"
        markup = types.InlineKeyboardMarkup(row_width=1)
        for rid, recipe in found_recipes.items():
            text += f"‚ñ™Ô∏è {recipe['title']}\n"
            markup.add(types.InlineKeyboardButton(recipe['title'], callback_data=f"show_{rid}"))
        bot.send_message(message.chat.id, text, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ ---
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–µ—Ü–µ–ø—Ç")
def start_add_recipe(message):
    chat_id = message.chat.id
    USER_STATE[chat_id] = {"state": STATE_NAME, "temp_recipe": {}}
    bot.send_message(chat_id, "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:")
    bot.register_next_step_handler(message, process_name)

def process_name(message):
    chat_id = message.chat.id
    if chat_id not in USER_STATE: return
    USER_STATE[chat_id]['temp_recipe']['title'] = message.text.strip()
    USER_STATE[chat_id]['state'] = STATE_CATEGORY
    categories = sorted(list(set(r['category'] for r in RECIPES.values())))
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if categories: markup.add(*categories)
    bot.send_message(chat_id, "–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(message, process_category)

def process_category(message):
    chat_id = message.chat.id
    if chat_id not in USER_STATE: return
    USER_STATE[chat_id]['temp_recipe']['category'] = message.text.strip()
    USER_STATE[chat_id]['state'] = STATE_INGREDIENTS
    bot.send_message(chat_id, "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:", reply_markup=generate_main_markup())
    bot.register_next_step_handler(message, process_ingredients)

def process_ingredients(message):
    chat_id = message.chat.id
    if chat_id not in USER_STATE: return
    USER_STATE[chat_id]['temp_recipe']['ingredients'] = message.text.strip()
    USER_STATE[chat_id]['state'] = STATE_VIDEO
    bot.send_message(chat_id, "–®–∞–≥ 4/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É:")
    bot.register_next_step_handler(message, process_video)

def process_video(message):
    chat_id = message.chat.id
    if chat_id not in USER_STATE: return
    video_info = None
    if message.video:
        video_info = message.video.file_id
        USER_STATE[chat_id]['temp_recipe']['video_type'] = 'file'
    elif message.text:
        video_info = message.text.strip()
        USER_STATE[chat_id]['temp_recipe']['video_type'] = 'link'
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
        bot.register_next_step_handler(message, process_video)
        return
    USER_STATE[chat_id]['temp_recipe']['video'] = video_info
    USER_STATE[chat_id]['temp_recipe'][FAVORITE_KEY] = False
    USER_STATE[chat_id]['state'] = STATE_KEYWORDS
    bot.send_message(chat_id, "–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(message, finish_recipe_add)

def finish_recipe_add(message):
    chat_id = message.chat.id
    if chat_id not in USER_STATE: return
    temp_recipe = USER_STATE[chat_id]['temp_recipe']
    temp_recipe['keywords'] = message.text.strip().lower()
    rid = str(uuid.uuid4())
    RECIPES[rid] = temp_recipe
    save_recipes(RECIPES)
    del USER_STATE[chat_id]
    bot.send_message(chat_id, f"üéâ –†–µ—Ü–µ–ø—Ç '{temp_recipe['title']}' –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=generate_main_markup())

# --- Callbacks –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('cat_'))
def handle_category_selection(call):
    bot.answer_callback_query(call.id)
    cat = call.data.split('_')[1]
    filtered = {}
    if cat == 'all': filtered = RECIPES
    elif cat == 'favorite': filtered = {rid: r for rid, r in RECIPES.items() if r.get(FAVORITE_KEY)}
    else: filtered = {rid: r for rid, r in RECIPES.items() if r['category'] == cat}
    if not filtered:
       
