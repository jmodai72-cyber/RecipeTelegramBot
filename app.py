# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import telebot
from telebot import types
import json
import uuid
import os
from flask import Flask, request

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
BOT_TOKEN = "8497669891:AAHMtQafkZ_6VpbbmN4dQjcXkH-o_et1QwA" 
bot = telebot.TeleBot(BOT_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
RECIPES_FILE = 'recipes.json'
USER_STATE = {}
STATE_NAME = 1
STATE_CATEGORY = 2
STATE_INGREDIENTS = 3
STATE_VIDEO = 4
STATE_KEYWORDS = 5
FAVORITE_KEY = "is_favorite"
FAVORITE_CATEGORY_NAME = "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
CUSTOM_CATEGORY_ORDER = ["–ó–∞–≤—Ç—Ä–∞–∫", "–°—É–ø—ã", "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞", "–°–∞–ª–∞—Ç", "Vegan", "–î–µ—Å–µ—Ä—Ç—ã"]

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° JSON ---
def load_recipes():
    if not os.path.exists(RECIPES_FILE):
        return {}
    try:
        with open(RECIPES_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def save_recipes(recipes_data):
    with open(RECIPES_FILE, 'w', encoding='utf-8') as f:
        json.dump(recipes_data, f, ensure_ascii=False, indent=4)

RECIPES = load_recipes()

# --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–† ---
def generate_main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "üîç –ü–æ–∏—Å–∫ –†–µ—Ü–µ–ø—Ç–∞")
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–µ—Ü–µ–ø—Ç")
    return markup

def generate_categories_markup():
    existing_categories = set(r['category'] for r in RECIPES.values())
    markup = types.InlineKeyboardMarkup(row_width=2)
    if any(r.get(FAVORITE_KEY) for r in RECIPES.values()):
        markup.add(types.InlineKeyboardButton(FAVORITE_CATEGORY_NAME, callback_data="cat_favorite"))
    for cat in CUSTOM_CATEGORY_ORDER:
        if cat in existing_categories:
            markup.add(types.InlineKeyboardButton(cat, callback_data=f"cat_{cat}"))
    if RECIPES:
        markup.add(types.InlineKeyboardButton("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="cat_all"))
    return markup

def generate_recipe_actions_markup(recipe_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    recipe = RECIPES.get(recipe_id, {})
    is_fav = recipe.get(FAVORITE_KEY, False)
    fav_text = "‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_fav else "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    markup.add(types.InlineKeyboardButton(fav_text, callback_data=f"toggle_fav_{recipe_id}"))
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{recipe_id}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_cats"))
    return markup

# --- –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK ---
app = Flask(__name__)
WEBHOOK_PATH = f'/{BOT_TOKEN}'

@app.route('/', methods=['GET'])
def index():
    return 'Recipe Telegram Bot is running.', 200

@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        try:
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            return '', 200
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return 'Processing Error', 200
    return 'Content-Type Error', 403

# --- –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK (–¢–æ–ª—å–∫–æ –¥–ª—è Render) ---
RENDER_URL = os.environ.get("RENDER_EXTERNAL_URL")
if RENDER_URL:
    WEBHOOK_URL = RENDER_URL + WEBHOOK_PATH
    try:
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL)
        print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {WEBHOOK_URL}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –õ–û–ì–û–í –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ---
@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'video'])
def echo_all(message):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.chat.id}: {message.text[:20] if message.text else '–ú–µ–¥–∏–∞'}")
