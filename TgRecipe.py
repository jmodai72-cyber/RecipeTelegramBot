# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import telebot
from telebot import types
import json
import uuid
import os
from flask import Flask, request

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
# !!! –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather !!!
BOT_TOKEN = "8416255020:AAG20WDAfIa4wMnjSqGtGZBoVFFEoGe4kAo"
bot = telebot.TeleBot(BOT_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
RECIPES_FILE = 'recipes.json'
USER_STATE = {} # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ—à–∞–≥–æ–≤–æ–º –≤–≤–æ–¥–µ —Ä–µ—Ü–µ–ø—Ç–∞
STATE_NAME = 1
STATE_CATEGORY = 2
STATE_INGREDIENTS = 3
STATE_VIDEO = 4
STATE_KEYWORDS = 5
FAVORITE_KEY = "is_favorite"
FAVORITE_CATEGORY_NAME = "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"

# --- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ü–û–†–Ø–î–û–ö –ö–ê–¢–ï–ì–û–†–ò–ô ---
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ
CUSTOM_CATEGORY_ORDER = [
    "–ó–∞–≤—Ç—Ä–∞–∫",
    "–°—É–ø—ã",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞",
    "–°–∞–ª–∞—Ç",
    "Vegan",
    "–î–µ—Å–µ—Ä—Ç—ã"
]

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° JSON ---

def load_recipes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å."""
    if not os.path.exists(RECIPES_FILE):
        print("–§–∞–π–ª —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º.")
        return {}
    try:
        with open(RECIPES_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ {RECIPES_FILE}.")
            return data
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞ ({e}). –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º.")
        return {}
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return {}

def save_recipes(recipes_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(RECIPES_FILE, 'w', encoding='utf-8') as f:
            json.dump(recipes_data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
RECIPES = load_recipes()

# --- –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–õ–ê–í–ò–ê–¢–£–† ---

def generate_main_markup():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "üîç –ü–æ–∏—Å–∫ –†–µ—Ü–µ–ø—Ç–∞")
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–µ—Ü–µ–ø—Ç")
    return markup

def generate_categories_markup():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    
    # 1. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ
    existing_categories = set(r['category'] for r in RECIPES.values())
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –ø–µ—Ä–≤—ã–º
    if any(r.get(FAVORITE_KEY) for r in RECIPES.values()):
        markup.add(types.InlineKeyboardButton(FAVORITE_CATEGORY_NAME, callback_data="cat_favorite"))

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    for cat in CUSTOM_CATEGORY_ORDER:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if cat in existing_categories:
            markup.add(types.InlineKeyboardButton(cat, callback_data=f"cat_{cat}"))
    
    # 4. –ö–Ω–æ–ø–∫–∞ "–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã"
    if RECIPES:
        markup.add(types.InlineKeyboardButton("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="cat_all"))

    return markup

def generate_recipe_actions_markup(recipe_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."""
    markup = types.InlineKeyboardMarkup(row_width=2)
    recipe = RECIPES.get(recipe_id, {})
    
    # –ö–Ω–æ–ø–∫–∞ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ/–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    is_fav = recipe.get(FAVORITE_KEY, False)
    fav_text = "‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_fav else "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    markup.add(types.InlineKeyboardButton(fav_text, callback_data=f"toggle_fav_{recipe_id}"))

    # –ö–Ω–æ–ø–∫–∞ –£–¥–∞–ª–∏—Ç—å
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{recipe_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_cats"))
    
    return markup

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –¢–ï–ö–°–¢–ê ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à—É –∫–Ω–∏–≥—É —Ä–µ—Ü–µ–ø—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    bot.send_message(message.chat.id, text, reply_markup=generate_main_markup())

@bot.message_handler(func=lambda message: message.text == "üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
def show_categories(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤–∏–¥–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    if not RECIPES:
        bot.send_message(message.chat.id, "–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç!")
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=generate_categories_markup())

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –†–µ—Ü–µ–ø—Ç–∞")
def start_search(message):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞."""
    bot.send_message(message.chat.id, 
                     "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º):")
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∫–∞–∫ –ø–æ–∏—Å–∫
    bot.register_next_step_handler(message, process_search_query)

def process_search_query(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."""
    query = message.text.lower()
    found_recipes = {}

    for recipe_id, recipe in RECIPES.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
        searchable_text = f"{recipe['title']} {recipe['category']} {recipe['ingredients']} {recipe.get('keywords', '')}".lower()
        
        if query in searchable_text:
            found_recipes[recipe_id] = recipe

    if found_recipes:
        text = f"–ù–∞–π–¥–µ–Ω–æ {len(found_recipes)} —Ä–µ—Ü–µ–ø—Ç(–æ–≤):\n"
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for recipe_id, recipe in found_recipes.items():
            text += f"‚ñ™Ô∏è {recipe['title']}\n"
            markup.add(types.InlineKeyboardButton(recipe['title'], callback_data=f"show_{recipe_id}"))
        
        bot.send_message(message.chat.id, text, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–¶–ï–ü–¢–ê (–ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥) ---

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–µ—Ü–µ–ø—Ç")
def start_add_recipe(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    chat_id = message.chat.id
    USER_STATE[chat_id] = {"state": STATE_NAME, "temp_recipe": {}}
    bot.send_message(chat_id, "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:")
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(message, process_name)

def process_name(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞."""
    chat_id = message.chat.id
    if chat_id not in USER_STATE or USER_STATE[chat_id]['state'] != STATE_NAME:
        return send_welcome(message)
    
    USER_STATE[chat_id]['temp_recipe']['title'] = message.text.strip()
    USER_STATE[chat_id]['state'] = STATE_CATEGORY
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = sorted(list(set(r['category'] for r in RECIPES.values())))
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if categories:
        markup.add(*categories, row_width=2)
    
    bot.send_message(chat_id, "–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ó–∞–≤—Ç—Ä–∞–∫', '–°—É–ø—ã'):", reply_markup=markup)
    bot.register_next_step_handler(message, process_category)

def process_category(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–∞."""
    chat_id = message.chat.id
    if chat_id not in USER_STATE or USER_STATE[chat_id]['state'] != STATE_CATEGORY:
        return send_welcome(message)
    
    USER_STATE[chat_id]['temp_recipe']['category'] = message.text.strip()
    USER_STATE[chat_id]['state'] = STATE_INGREDIENTS
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(chat_id, "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:", reply_markup=generate_main_markup())
    bot.register_next_step_handler(message, process_ingredients)

def process_ingredients(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."""
    chat_id = message.chat.id
    if chat_id not in USER_STATE or USER_STATE[chat_id]['state'] != STATE_INGREDIENTS:
        return send_welcome(message)

    USER_STATE[chat_id]['temp_recipe']['ingredients'] = message.text.strip()
    USER_STATE[chat_id]['state'] = STATE_VIDEO
    
    bot.send_message(chat_id, "–®–∞–≥ 4/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ YouTube):")
    bot.register_next_step_handler(message, process_video)

def process_video(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç file_id) –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É."""
    chat_id = message.chat.id
    if chat_id not in USER_STATE or USER_STATE[chat_id]['state'] != STATE_VIDEO:
        return send_welcome(message)
    
    video_info = None

    if message.video:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ—Ñ–∞–π–ª
        video_info = message.video.file_id
        USER_STATE[chat_id]['temp_recipe']['video_type'] = 'file'
    elif message.text:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É
        video_info = message.text.strip()
        USER_STATE[chat_id]['temp_recipe']['video_type'] = 'link'
    
    if not video_info:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        bot.send_message(chat_id, "–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –≤–∏–¥–µ–æ, –Ω–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
        bot.register_next_step_handler(message, process_video) # –ü–æ–≤—Ç–æ—Ä—è–µ–º —à–∞–≥
        return

    USER_STATE[chat_id]['temp_recipe']['video'] = video_info
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    USER_STATE[chat_id]['temp_recipe'][FAVORITE_KEY] = False 
    USER_STATE[chat_id]['state'] = STATE_KEYWORDS
    
    bot.send_message(chat_id, "–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã—Å—Ç—Ä–æ, —É–∂–∏–Ω, –∫—É—Ä–∏—Ü–∞):")
    bot.register_next_step_handler(message, finish_recipe_add)

def finish_recipe_add(message):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç."""
    chat_id = message.chat.id
    if chat_id not in USER_STATE or USER_STATE[chat_id]['state'] != STATE_KEYWORDS:
        return send_welcome(message)
    
    # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    temp_recipe = USER_STATE[chat_id]['temp_recipe']
    temp_recipe['keywords'] = message.text.strip().lower()
    recipe_id = str(uuid.uuid4())
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    RECIPES[recipe_id] = temp_recipe
    save_recipes(RECIPES)
    del USER_STATE[chat_id]

    bot.send_message(chat_id, 
                     f"üéâ –†–µ—Ü–µ–ø—Ç '{temp_recipe['title']}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{temp_recipe['category']}'!", 
                     reply_markup=generate_main_markup())

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–°–¢–†–û–ï–ù–ù–û–ô –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

@bot.callback_query_handler(func=lambda call: call.data.startswith('cat_'))
def handle_category_selection(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    bot.answer_callback_query(call.id)
    category_id = call.data.split('_')[1]
    
    filtered_recipes = {}
    
    if category_id == 'all':
        filtered_recipes = RECIPES
        title = "–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã"
    elif category_id == 'favorite':
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ–ª–∞–≥—É is_favorite
        filtered_recipes = {id: r for id, r in RECIPES.items() if r.get(FAVORITE_KEY)}
        title = FAVORITE_CATEGORY_NAME
    else:
        title = f"–†–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_id}"
        filtered_recipes = {id: r for id, r in RECIPES.items() if r['category'] == category_id}

    if not filtered_recipes:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                              text=f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{title}' –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.", reply_markup=generate_categories_markup())
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for recipe_id, recipe in filtered_recipes.items():
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∑–≤–µ–∑–¥—ã, –µ—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–π
        star = "‚≠ê " if recipe.get(FAVORITE_KEY) else ""
        markup.add(types.InlineKeyboardButton(f"{star}{recipe['title']}", callback_data=f"show_{recipe_id}"))

    bot.edit_message_text(chat_id=call.message.chat.id, 
                          message_id=call.message.message_id, 
                          text=title, 
                          reply_markup=markup)

def send_recipe_details(chat_id, message_id, recipe_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    recipe = RECIPES.get(recipe_id)
    if not recipe:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê ---
    favorite_status = " (‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º)" if recipe.get(FAVORITE_KEY) else ""
    recipe_text = (
        f"üìù *{recipe['title']}*{favorite_status}\n"
        f"üî∏ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {recipe['category']}\n\n"
        f"ü•ï *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{recipe['ingredients']}\n\n"
        f"üîó *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:*\n{recipe.get('keywords', '–ù–µ—Ç')}"
    )

    back_markup = generate_recipe_actions_markup(recipe_id)

    video_info = recipe.get('video')
    video_type = recipe.get('video_type')

    if video_info and video_type == 'file':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –ø–æ file_id
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∏
            bot.send_video(chat_id, video_info, caption=recipe_text, parse_mode="Markdown")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
            bot.delete_message(chat_id, message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º:", reply_markup=back_markup)
        except Exception as e:
            error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª).\n\n{recipe_text}"
            bot.send_message(chat_id, error_text, parse_mode="Markdown", reply_markup=back_markup)
            bot.delete_message(chat_id, message_id)

    elif video_info and video_type == 'link':
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Ç–µ–∫—Å—Ç
        recipe_text += f"\n\nüì∫ *–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n{video_info}"
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                              text=recipe_text, parse_mode="Markdown", reply_markup=back_markup)
        
    else:
        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ—Ç
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                              text=recipe_text, parse_mode="Markdown", reply_markup=back_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_'))
def show_recipe_details(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞."""
    bot.answer_callback_query(call.id)
    recipe_id = call.data.split('_')[1]
    send_recipe_details(call.message.chat.id, call.message.message_id, recipe_id)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô (–£–î–ê–õ–ï–ù–ò–ï / –ò–ó–ë–†–ê–ù–ù–û–ï) ---

@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_fav_'))
def handle_toggle_favorite(call):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    bot.answer_callback_query(call.id)
    recipe_id = call.data.split('_')[2]
    
    if recipe_id in RECIPES:
        is_fav = RECIPES[recipe_id].get(FAVORITE_KEY, False)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        RECIPES[recipe_id][FAVORITE_KEY] = not is_fav
        save_recipes(RECIPES)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        send_recipe_details(call.message.chat.id, call.message.message_id, recipe_id)
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                              text="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_recipe(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞."""
    bot.answer_callback_query(call.id)
    recipe_id = call.data.split('_')[1]
    recipe = RECIPES.get(recipe_id)
    
    if recipe:
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{recipe_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"show_{recipe_id}") # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ—Ç–∞–ª—è–º
        )
        
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç '{recipe['title']}'?",
                              reply_markup=markup)
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))
def handle_confirm_delete(call):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞."""
    bot.answer_callback_query(call.id, text="–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω!")
    recipe_id = call.data.split('_')[2]

    if recipe_id in RECIPES:
        recipe_title = RECIPES[recipe_id]['title']
        del RECIPES[recipe_id]
        save_recipes(RECIPES)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"üóëÔ∏è –†–µ—Ü–µ–ø—Ç '{recipe_title}' —É–¥–∞–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                              reply_markup=generate_categories_markup())
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_cats')
def back_to_categories(call):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    bot.answer_callback_query(call.id)
    bot.edit_message_text(chat_id=call.message.chat.id, 
                          message_id=call.message.message_id, 
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
                          reply_markup=generate_categories_markup())

# --- –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK (24/7 –•–û–°–¢–ò–ù–ì) ---

app = Flask(__name__)

@app.route('/', methods=['GET'])
def index():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    return 'Recipe Telegram Bot is running.', 200

@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    return 'Content-Type Error', 403

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Flask
    # Gunicorn –∑–∞–ø—É—Å–∫–∞–µ—Ç app, –ø–æ—ç—Ç–æ–º—É —ç—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ Render.
    # –ù–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    print("Flask app defined. Use gunicorn to run on Render.")
